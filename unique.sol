// SPDX-License-Identifier: MIT pragma solidity ^0.8.0; contract MyUniqueToken { string public name = "UniqueToken"; string public symbol = "UNT"; uint256 public totalSupply = 1000000 * (10 ** 18); mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; constructor() { balanceOf[msg.sender] = totalSupply; } // Issue: Incorrect allowance decrement in approve function function approve(address spender, uint256 value) public returns (bool) { allowance[msg.sender][spender] = value; emit Approval(msg.sender, spender, value); return true; } // Issue: The transferFrom function doesn't properly decrease the allowance function transferFrom(address from, address to, uint256 value) public returns (bool) { require(to != address(0), "ERC20: transfer to the zero address"); require(balanceOf[from] >= value, "ERC20: insufficient balance"); require(allowance[from][msg.sender] >= value, "ERC20: allowance exceeded"); balanceOf[from] -= value; balanceOf[to] += value; allowance[from][msg.sender] -= value; // This line has an issue in not checking for underflow emit Transfer(from, to, value); return true; } event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); }